// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';

import 'data/models/recitation.dart';
import 'data/models/student.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 7227024201257795265),
      name: 'Recitation',
      lastPropertyId: const IdUid(9, 7989921675900145591),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 714036835843524796),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7867750125083942396),
            name: 'instName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2971805577439810748),
            name: 'date',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4333427790461529280),
            name: 'book',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 773176955651857343),
            name: 'tome',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2132094385606709400),
            name: 'rate',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 163749316868462034),
            name: 'NOM',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4684587308383479175),
            name: 'time',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7989921675900145591),
            name: 'pages',
            type: 23,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 6807326854828059660),
      name: 'Student',
      lastPropertyId: const IdUid(5, 2715515925420880920),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5064905990790187498),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4459408393858788999),
            name: 'isUser',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1204221141198249393),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3690109178533892249),
            name: 'avg',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2715515925420880920),
            name: 'pLW',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Store openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) =>
    Store(getObjectBoxModel(),
        directory: directory,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 6807326854828059660),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Recitation: EntityDefinition<Recitation>(
        model: _entities[0],
        toOneRelations: (Recitation object) => [],
        toManyRelations: (Recitation object) => {},
        getId: (Recitation object) => object.id,
        setId: (Recitation object, int id) {
          object.id = id;
        },
        objectToFB: (Recitation object, fb.Builder fbb) {
          final instNameOffset = fbb.writeString(object.instName);
          final dateOffset = fbb.writeString(object.date);
          final bookOffset = fbb.writeString(object.book);
          final pagesOffset = fbb.writeListInt8(object.pages);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, instNameOffset);
          fbb.addOffset(2, dateOffset);
          fbb.addOffset(3, bookOffset);
          fbb.addInt64(4, object.tome);
          fbb.addInt64(5, object.rate);
          fbb.addInt64(6, object.NOM);
          fbb.addInt64(7, object.time);
          fbb.addOffset(8, pagesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Recitation(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              instName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              date: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              book: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              tome: const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              pages: const fb.ListReader<int>(fb.Int8Reader(), lazy: false)
                  .vTableGet(buffer, rootOffset, 20, []),
              rate: const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
              NOM: const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
              time:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0));

          return object;
        }),
    Student: EntityDefinition<Student>(
        model: _entities[1],
        toOneRelations: (Student object) => [],
        toManyRelations: (Student object) => {},
        getId: (Student object) => object.id,
        setId: (Student object, int id) {
          object.id = id;
        },
        objectToFB: (Student object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.isUser);
          fbb.addOffset(2, nameOffset);
          fbb.addFloat64(3, object.avg);
          fbb.addInt64(4, object.pLW);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Student(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0),
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              isUser: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 6, false));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Recitation] entity fields to define ObjectBox queries.
class Recitation_ {
  /// see [Recitation.id]
  static final id =
      QueryIntegerProperty<Recitation>(_entities[0].properties[0]);

  /// see [Recitation.instName]
  static final instName =
      QueryStringProperty<Recitation>(_entities[0].properties[1]);

  /// see [Recitation.date]
  static final date =
      QueryStringProperty<Recitation>(_entities[0].properties[2]);

  /// see [Recitation.book]
  static final book =
      QueryStringProperty<Recitation>(_entities[0].properties[3]);

  /// see [Recitation.tome]
  static final tome =
      QueryIntegerProperty<Recitation>(_entities[0].properties[4]);

  /// see [Recitation.rate]
  static final rate =
      QueryIntegerProperty<Recitation>(_entities[0].properties[5]);

  /// see [Recitation.NOM]
  static final NOM =
      QueryIntegerProperty<Recitation>(_entities[0].properties[6]);

  /// see [Recitation.time]
  static final time =
      QueryIntegerProperty<Recitation>(_entities[0].properties[7]);

  /// see [Recitation.pages]
  static final pages =
      QueryByteVectorProperty<Recitation>(_entities[0].properties[8]);
}

/// [Student] entity fields to define ObjectBox queries.
class Student_ {
  /// see [Student.id]
  static final id = QueryIntegerProperty<Student>(_entities[1].properties[0]);

  /// see [Student.isUser]
  static final isUser =
      QueryBooleanProperty<Student>(_entities[1].properties[1]);

  /// see [Student.name]
  static final name = QueryStringProperty<Student>(_entities[1].properties[2]);

  /// see [Student.avg]
  static final avg = QueryDoubleProperty<Student>(_entities[1].properties[3]);

  /// see [Student.pLW]
  static final pLW = QueryIntegerProperty<Student>(_entities[1].properties[4]);
}
